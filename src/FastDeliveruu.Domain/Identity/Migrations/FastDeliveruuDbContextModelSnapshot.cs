// <auto-generated />
using System;
using FastDeliveruu.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FastDeliveruu.Domain.Identity.Migrations
{
    [DbContext(typeof(FastDeliveruuDbContext))]
    partial class FastDeliveruuDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.AddressesCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AppUserId" }, "IX_AddressCustomers_AppUserId");

                    b.HasIndex(new[] { "CityId" }, "IX_AddressCustomers_CityId");

                    b.HasIndex(new[] { "DistrictId" }, "IX_AddressCustomers_DistrictId");

                    b.HasIndex(new[] { "WardId" }, "IX_AddressCustomers_WardId");

                    b.HasIndex(new[] { "CityId" }, "IX_DeliveryAddresses_CityId");

                    b.HasIndex(new[] { "DistrictId" }, "IX_DeliveryAddresses_DistrictId");

                    b.HasIndex(new[] { "WardId" }, "IX_DeliveryAddresses_WardId");

                    b.ToTable("AddressesCustomers");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.AppUserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("NotificationType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AppUserId" }, "IX_AppUserNotifications_AppUserId");

                    b.ToTable("AppUserNotifications");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.AutoGenEntities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ThreadId" }, "IX_Chats_SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.AutoGenEntities.MenuItemInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReserved")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MenuItemId" }, "IX_MenuItemInventory_MenuItemId");

                    b.ToTable("MenuItemInventories");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.AutoGenEntities.MenuVariantInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MenuVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReserved")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MenuVariantId" }, "IX_MenuVariantInventory_MenuVariantId");

                    b.ToTable("MenuVariantInventories");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.AutoGenEntities.MessageThread", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("RecipientAppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RecipientShipperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("RecipientType")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("SenderAppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SenderShipperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("SenderType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RecipientAppUserId" }, "IX_MessageThreads_RecipientAppUserId");

                    b.HasIndex(new[] { "RecipientShipperId" }, "IX_MessageThreads_RecipientShipperId");

                    b.HasIndex(new[] { "SenderAppUserId" }, "IX_MessageThreads_SenderAppUserId");

                    b.HasIndex(new[] { "SenderShipperId" }, "IX_MessageThreads_SenderShipperId");

                    b.ToTable("MessageThreads");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<byte?>("DiscountType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex(new[] { "CouponCode" }, "UQ__Coupons__D349080072B75AA0")
                        .IsUnique();

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("EstimatedDeliveryTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMethods");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(126)
                        .HasColumnType("nvarchar(126)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Genres_Name");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Identity.Shipper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CitizenIdentification")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("ModelType")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "IX_Shippers_CityId");

                    b.HasIndex(new[] { "DistrictId" }, "IX_Shippers_DistrictId");

                    b.HasIndex(new[] { "WardId" }, "IX_Shippers_WardId");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(3,2)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GenreId" }, "IX_MenuItems_GenreId");

                    b.HasIndex(new[] { "RestaurantId" }, "IX_MenuItems_RestaurantId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.MenuItemReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AppUserId" }, "IX_MenuItemReviews_AppUserId");

                    b.HasIndex(new[] { "MenuItemId" }, "IX_MenuItemReviews_MenuItemId");

                    b.ToTable("MenuItemReviews");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.MenuVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("VarietyName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MenuItemId" }, "IX_MenuVariants_MenuItemId");

                    b.ToTable("MenuVariants");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeliveryMethodId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte?>("OrderStatus")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("PaymentMethod")
                        .HasColumnType("tinyint");

                    b.Property<string>("PaymentOrderId")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("ShipperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShipperId");

                    b.HasIndex(new[] { "AppUserId" }, "IX_Orders_AppUserId");

                    b.HasIndex(new[] { "CityId" }, "IX_Orders_CityId");

                    b.HasIndex(new[] { "DeliveryMethodId" }, "IX_Orders_DeliveryMethodId");

                    b.HasIndex(new[] { "DistrictId" }, "IX_Orders_DistrictId");

                    b.HasIndex(new[] { "WardId" }, "IX_Orders_WardId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.OrderDelivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualDeliveryTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<byte>("DeliveryStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("EstimatedDeliveryTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShipperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderDeliveries_OrderId");

                    b.HasIndex(new[] { "ShipperId" }, "IX_OrderDeliveries_ShipperId");

                    b.ToTable("OrderDeliveries");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MenuVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MenuItemId" }, "IX_OrderDetails_MenuItemId");

                    b.HasIndex(new[] { "MenuVariantId" }, "IX_OrderDetails_MenuVariantId");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderDetails_OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("PaymentMethod")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("PaymentStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsVerify")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(126)
                        .HasColumnType("nvarchar(126)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "IX_Restaurants_CityId");

                    b.HasIndex(new[] { "DistrictId" }, "IX_Restaurants_DistrictId");

                    b.HasIndex(new[] { "Name" }, "IX_Restaurants_Name");

                    b.HasIndex(new[] { "WardId" }, "IX_Restaurants_WardId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.RestaurantHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("WeekenDay")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RestaurantId" }, "IX_RestaurantHours_RestaurantId");

                    b.ToTable("RestaurantHours");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.RestaurantReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AppUserId" }, "IX_RestaurantsReviews_AppUserId");

                    b.HasIndex(new[] { "RestaurantId" }, "IX_RestaurantsReviews_RestaurantId");

                    b.ToTable("RestaurantReviews");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.ShipperNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("NotificationType")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("ShipperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ShipperId" }, "IX_ShipperNotifications_ShipperId");

                    b.ToTable("ShipperNotifications");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MenuVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AppUserId" }, "IX_ShoppingCart_AppUserId");

                    b.HasIndex(new[] { "MenuItemId" }, "IX_ShoppingCart_MenuItemId");

                    b.HasIndex(new[] { "MenuVariantId" }, "IX_ShoppingCart_MenuVariantId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.WishList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MenuVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MenuVariantId");

                    b.HasIndex(new[] { "AppUserId" }, "IX_WishLists_AppUserId");

                    b.HasIndex(new[] { "MenuItemId" }, "IX_WishLists_MenuItemId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.AddressesCustomer", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", "AppUser")
                        .WithMany("AddressesCustomers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastDeliveruu.Domain.Entities.City", "City")
                        .WithMany("AddressesCustomers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_AddressCustomers_Cities_CityId");

                    b.HasOne("FastDeliveruu.Domain.Entities.District", "District")
                        .WithMany("AddressesCustomers")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_AddressCustomers_Districts_DistrictId");

                    b.HasOne("FastDeliveruu.Domain.Entities.Ward", "Ward")
                        .WithMany("AddressesCustomers")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_AddressCustomers_Wards_WardId");

                    b.Navigation("AppUser");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.AppUserNotification", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", "AppUser")
                        .WithMany("AppUserNotifications")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.AutoGenEntities.Chat", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.AutoGenEntities.MessageThread", "MessageThread")
                        .WithMany("Chats")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageThread");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.AutoGenEntities.MenuItemInventory", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.MenuItem", "MenuItem")
                        .WithMany("MenuItemInventories")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.AutoGenEntities.MenuVariantInventory", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.MenuVariant", "MenuVariant")
                        .WithMany("MenuVariantInventories")
                        .HasForeignKey("MenuVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuVariant");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.AutoGenEntities.MessageThread", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", "RecipientAppUser")
                        .WithMany("RecipientMessageThreads")
                        .HasForeignKey("RecipientAppUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.Shipper", "RecipientShipper")
                        .WithMany("RecipientMessageThreads")
                        .HasForeignKey("RecipientShipperId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", "SenderAppUser")
                        .WithMany("SenderMessageThreads")
                        .HasForeignKey("SenderAppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.Shipper", "SenderShipper")
                        .WithMany("SenderMessageThreads")
                        .HasForeignKey("SenderShipperId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("RecipientAppUser");

                    b.Navigation("RecipientShipper");

                    b.Navigation("SenderAppUser");

                    b.Navigation("SenderShipper");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Coupon", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", "AppUser")
                        .WithMany("Coupons")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.District", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppRole", "AppRole")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Identity.Shipper", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.City", "City")
                        .WithMany("Shippers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Shippers_Cities_CityId");

                    b.HasOne("FastDeliveruu.Domain.Entities.District", "District")
                        .WithMany("Shippers")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Shippers_Districts_DistrictId");

                    b.HasOne("FastDeliveruu.Domain.Entities.Ward", "Ward")
                        .WithMany("Shippers")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Shippers_Wards_WardId");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.MenuItem", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Genre", "Genre")
                        .WithMany("MenuItems")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastDeliveruu.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.MenuItemReview", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", "AppUser")
                        .WithMany("MenuItemReviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastDeliveruu.Domain.Entities.MenuItem", "MenuItem")
                        .WithMany("MenuItemReviews")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.MenuVariant", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.MenuItem", "MenuItem")
                        .WithMany("MenuVariants")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Order", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastDeliveruu.Domain.Entities.City", "City")
                        .WithMany("Orders")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Cities_CityId");

                    b.HasOne("FastDeliveruu.Domain.Entities.DeliveryMethod", "DeliveryMethod")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Orders_DeliveryMethods_DeliveryMethodId");

                    b.HasOne("FastDeliveruu.Domain.Entities.District", "District")
                        .WithMany("Orders")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Districts_DistrictId");

                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.Shipper", "Shipper")
                        .WithMany("Orders")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Shippers_ShipperId");

                    b.HasOne("FastDeliveruu.Domain.Entities.Ward", "Ward")
                        .WithMany("Orders")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Wards_WardId");

                    b.Navigation("AppUser");

                    b.Navigation("City");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("District");

                    b.Navigation("Shipper");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.OrderDelivery", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Order", "Order")
                        .WithMany("OrderDeliveries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.MenuItem", "MenuItem")
                        .WithMany("OrderDetails")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastDeliveruu.Domain.Entities.MenuVariant", "MenuVariant")
                        .WithMany("OrderDetails")
                        .HasForeignKey("MenuVariantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_OrderDetails_MenuVariants_MenuVariantId");

                    b.HasOne("FastDeliveruu.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("MenuVariant");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Payment", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Restaurant", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.City", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Restaurants_Cities_CityId");

                    b.HasOne("FastDeliveruu.Domain.Entities.District", "District")
                        .WithMany("Restaurants")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Restaurants_Districts_DistrictId");

                    b.HasOne("FastDeliveruu.Domain.Entities.Ward", "Ward")
                        .WithMany("Restaurants")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Restaurants_Wards_WardId");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.RestaurantHour", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("RestaurantHours")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.RestaurantReview", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", "AppUser")
                        .WithMany("RestaurantReviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastDeliveruu.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("RestaurantReviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.ShipperNotification", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.Shipper", "Shipper")
                        .WithMany("ShipperNotifications")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.ShoppingCart", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", "AppUser")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastDeliveruu.Domain.Entities.MenuItem", "MenuItem")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastDeliveruu.Domain.Entities.MenuVariant", "MenuVariant")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("MenuVariantId");

                    b.Navigation("AppUser");

                    b.Navigation("MenuItem");

                    b.Navigation("MenuVariant");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Ward", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.WishList", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", "AppUser")
                        .WithMany("WishLists")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastDeliveruu.Domain.Entities.MenuItem", "MenuItem")
                        .WithMany("WishLists")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastDeliveruu.Domain.Entities.MenuVariant", "MenuVariant")
                        .WithMany("WishLists")
                        .HasForeignKey("MenuVariantId");

                    b.Navigation("AppUser");

                    b.Navigation("MenuItem");

                    b.Navigation("MenuVariant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FastDeliveruu.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.AutoGenEntities.MessageThread", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.City", b =>
                {
                    b.Navigation("AddressesCustomers");

                    b.Navigation("Districts");

                    b.Navigation("Orders");

                    b.Navigation("Restaurants");

                    b.Navigation("Shippers");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.DeliveryMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.District", b =>
                {
                    b.Navigation("AddressesCustomers");

                    b.Navigation("Orders");

                    b.Navigation("Restaurants");

                    b.Navigation("Shippers");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Genre", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("AppUserRoles");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("AddressesCustomers");

                    b.Navigation("AppUserNotifications");

                    b.Navigation("AppUserRoles");

                    b.Navigation("Coupons");

                    b.Navigation("MenuItemReviews");

                    b.Navigation("Orders");

                    b.Navigation("RecipientMessageThreads");

                    b.Navigation("RestaurantReviews");

                    b.Navigation("SenderMessageThreads");

                    b.Navigation("ShoppingCarts");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Identity.Shipper", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("RecipientMessageThreads");

                    b.Navigation("SenderMessageThreads");

                    b.Navigation("ShipperNotifications");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.MenuItem", b =>
                {
                    b.Navigation("MenuItemInventories");

                    b.Navigation("MenuItemReviews");

                    b.Navigation("MenuVariants");

                    b.Navigation("OrderDetails");

                    b.Navigation("ShoppingCarts");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.MenuVariant", b =>
                {
                    b.Navigation("MenuVariantInventories");

                    b.Navigation("OrderDetails");

                    b.Navigation("ShoppingCarts");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDeliveries");

                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Restaurant", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("RestaurantHours");

                    b.Navigation("RestaurantReviews");
                });

            modelBuilder.Entity("FastDeliveruu.Domain.Entities.Ward", b =>
                {
                    b.Navigation("AddressesCustomers");

                    b.Navigation("Orders");

                    b.Navigation("Restaurants");

                    b.Navigation("Shippers");
                });
#pragma warning restore 612, 618
        }
    }
}
